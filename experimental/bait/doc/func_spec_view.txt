

Title: Wrye Bash Installer Tab View Functional Specification
Author: Myk Taylor (myk002)
Creation Date: 2011 Jan 10


===============
  UI Elements
===============
The BAIT UI consists of the following main elements:

1) Settings menu
2) Search bar
3) Installed data panel
4) Packages tree
5) Package details tabs
6) Package contents tree
7) File details panel
8) Notification log
9) Comments box

Settings menu
  The state operations popup menu allows access to operations that save, revert, import, and export BAIT state, such as the metadata for the current set of installers.  The menu is accessed by clicking the button visible to the left of the search bar.  It also grants access to the "derive state from currently installed files" functionality, whereby the probable 'markedForInstall' state of each package is deduced from analyzing the installed files.

Search bar
  The search bar allows the user to filter the shown packages and files.  Initially, this will probably just do a substring search for the package name, but eventually this may understand more complex filter queries, provide "awesome bar"-like autocomplete, or google-like suggestions based on substrings seen in the installers.  Depending on performance, it may support find-as-you-type.

Data bar ("collapsed" view of data tree)
  This is a one-line info bar that has a number of action icons and shows information about the installed files in the target data directory (Obivion/Data, usually).  Information includes: number of active esm/esps?, number of inactive/ghosted esm/esps?, number of files?, size of files?, remaining disk space? (TODO: what information is needed here?).  The entire bar is highlighted in orange if any file in the data directory needs annealing.  In the future, it may be highlighted in red if an installed non-filter esm/p has a missing master.  Otherwise it has a default white background.  R-clicking allows access to operations, most of which are already available via buttons on the bar, such as anneal, expand, derive state? (TODO: other actions?)

    QUESTIONS: What actions and info belong to the data bar?

Data tree ("expanded" view of data bar)
  

Installers tree
  

Details pane
  

Notification log
  The notification log is a scrollable read-only text window at the bottom of the screen.  Notifications and errors from the backend components are shown here, such as the successful installation of a package, summary of what was saved when a "force state save" operation is selected, or the achievement of quiescence.  Most recent notifications are shown at the bottom, but the user can expand the window and/or scroll up if they wish to view previous notifications.  The window auto-scrolls to the bottom if it is already at the bottom and a new message is added.  Otherwise it stays where it is to avoid jumping from where the user is currently viewing.  Depending on results from testing, it may drop old messages if it proves too burdensome to keep them indefinitely.  Error messages may also result in a popup window to ensure they are communicated properly to the user.  In the future, messages may be given verbosity levels and the user may be allowed to dynamically filter them.






Questions that need resolving:
1) Details pane
 - what is shown when one group/project/subproject/file is selected?
 - what is shown when nothing is selected
 - what is shown when multiple items of the same type are selected?
 - what is shown when items of different types are selected?
 - what is shown when multiple items of the same type are selected in both the installers pane and the data pane?
 - what is shown when multiple items of different types are selected across the installers pane and data pane?

2) Drag and drop
 - what happens when non-project files are selected when a drag and drop operation begins?  is DnD cancelled?  will the containing project get dragged instead?
 - what happens when multiple items are selected, some projects and some non-projects.  Same questions as previous item.

3) Installers tree
 - basic tree, searching vs columns, sorting+searching
 - checking/unchecking behavior

4) Data tree
 - basic tree or columns?  should "owner" be a different column, or just tacked on to the row text?
   - column pro: more standard presentation layout
   - column con: provides false sense that files can be sorted by owner
   - row pro: flexible - we can add more data later as needed without changing the view at all
   - row pro: possibly messy
 - does DnD from this pane mean anything?  uninstallation?  (with confirmation?)


- User drags an external file directly onto the data pane.  confirmation?  package gets copied to installers, wizard run, package gets installed 
- icon by package name to indicate that it has a wizard

View
  Prompt responsiveness to user actions
  Allow user to interact with data
  Keeps widget-specific state
  Informs presenter of user selections


  3b - allow individual files be selected/deselected.  project gets checked when any of its files gets checked.  if a mod is upgraded, new files inherit the check state of its parent directory.  project should be colored to indicate that files have been deselected.  show how many files are deselected in its details report.  individual files should save check state even if parent project is deselected/reselected, but it should be easy to reset project to "check/uncheck all children".  the whole idea is an extension to what is done now with saving check states of esp files, but state should be tied to name, not index
  4a - show filtered projects grayed-out when move drag-drop is started to allow precise positioning?
  4c - expression editor like wireshark?  search syntax highlighting?

I was worried that a popup warning would be too intrusive. I was just going to highlight the project that is now missing a master in red. -- ah, on second thought, maybe a popup would be warranted if the user attempts to leave the tab with a project in a bad state like this -- they may not have seen it due to having it scrolled off the page.

[quote]
- Sometimes the user will probably want to override the grouping to apply various kinds of sorts (alphabetic, by modified date, by size, by various TESNexus fields such as author depending on the integration level with that)
[/quote]
This is one area that needs discussion. I am torn between providing functionality like this and trying to keep the UI simple and clean. I planned to add search capability that would be able to pick out projects with certain attributes, but that would not support sorting. Compare:
Tree is always in install order, no sorting supported
pros: uncomplicated UI, no crowded columns, consistent UI capabilities (e.g. drag-n-drop reordering is always supported)
cons: no sorting
Tree has multiple columns (TreeList), can sort by any column
pros: all information available for all projects all the time
cons: can drag-n-drop to install, but not to reorder, more complicated code, more crowded UI, more chances for confusion
Tree has no columns, project name prepended with "sort" metric, metric selectable by combobox
pros: sorting supported, UI clean
cons: still has drag-n-drop inconsistencies, not all info available all the time

thoughts? How important is it to present size, date, etc. in the main tree? All information would be available in the details pane when a project is selected. New projects can be highlighted by other mechanisms. Should WB be concerned with disk space per se? Do we need to /sort/ by all these metrics, or is search enough?


[quote]
- I imagine you plan to remember from session to session all the filters the users had activated, and the expanded/collapsed state of each level of the trees?
[/quote]
I was definitely planning on saving the filter state. I'm not sure about saving the expanded/collapsed state of the tree hierarchy.. It is certainly handy in programs like regedit where you want to go back to the same place in the tree many times, but is it necessary here? When I use the bash installers tab, I usually work with a different mod each time, and I would rather everything appear initially collapsed at each run. I suppose it could be useful if someone is repeatedly tweaking a particular mod. Maybe this behavior can be a user-selectable option?


[quote]
- I'm not sure of what happens when you select a specific file in the installers tree: does the other tree react to that and display the corresponding installed file if available? And where does conflict info for that file get displayed?
[/quote]
I was certainly considering clicking on one tree highlighting related data in the other tree. I am a bit fuzzy on this. Overall, my current thinking is:
the two trees act as a single "selectability namespace". that is, if a user clicks on a file in the data tree with something already selected in the installers tree, the installers tree will have its selection removed, the data tree will gain focus and the selection, and the details pane will show metadata related to the selected file in the data tree (e.g. thumbnail image, file size, list of projects that compete to own that file, etc.). A user can ctrl-click and select items in both trees, in which case details for both will be shown.
I haven't quite worked out how the details will be presented (layout). I'm thinking collapsible panels to allow comparisons of arbitrary numbers of items without a lot of clutter and hyperlinks to references in conflict lists. We'll see, though. The details pane is intended to be freeform so it can evolve over time; the first offering will probably be quite simple.



================
  UI Use Cases
================
- user clicks on Installer tab
: blank tree is initially presented in the left pane, populated asynchronously with project names as they are discovered (black text), prepended with their install order.  Projects are listed in a saved order, indicating their installation priority.  Projects not in the saved order appear at the bottom.  Groups of projects can appear as a collapsed node.  The node is indicated to be a group by utilizing bolded text.  When a project (or group) is discovered to have one of the following properties, its text background is changed to the associated color: all selected files match installed versions: green; at least one file does not match the installed version and is the active conflict winner: orange; at least one file has a missing dependency and is the active conflict winner: red.  A progress bar appears alongside each project/group name indicating how much of the project/group has been analyzed (and therefore how close the user is to being able to sync files from the project/group, though they can browse it and change its state at any time).  The upper right pane shows a similar tree of the installed files, with similar highlight semantics.  The lower right pane is initially empty.

- user expands a group
: the projects/subgroups appear as child nodes

- user expands a project
: the subprojects appear as child nodes.  If no subprojects exist, or if only a single subproject exists, it directly expands into the project "data" dir.  This mimics closely the user experience today.  The main difference is that .esp files are selected in the left pane instead of the right pane.

- user clicks on group or project item
: item line is highlighted.  The following information appears in the lower right pane: installer size on disk; installed files size on disk; comments (editable); number of: files selected for installation, conflict losers, matches installed, non-game files, files to add, files to update, files to remove, dependencies.  Each numerical summary can be expanded to show the list of related files, complete with checkboxes so the user can modify the lists inline.  If the lists are incomplete, the text is in light gray.

- user clicks file item
: item line is highlighted.  The following information appears in the lower right pane: conflict list, with conflict winner bolded; "required by" list; "depends on" list; preview for texture and model files?

- user r-clicks on a group or a project
: actions: move, hide (if no children are active), commit changes, duplicate, rename

- user r-clicks on a group
: additional actions: enable/disable conflict reporting within the group

- user r-clicks on a project
: additional actions: open, open at tesnexus

- user r-clicks on a file
: actions: open, rename on install (.bsa files only), diff?, merge?

- user drags an item
: not allowed to start drag on anything but projects or groups.  drop target is only valid between projects or on top of a group item.  Hover over a group item to expand before dropping.  Equivalent to "move" command on projects


When a project is loaded fully enough so that it can be synced, a green dot will appear between the project name and checkbox.  Previous stages of project loading may have different color dots associated with them.

Whenever a user r-clicks on the tree view, the currently selected items are analyzed and a list of possible actions are presented to the user in a popup menu.

Notes
-----
Warn on installing OBSE plugin
integration with nifskope?
project: package, order, modified, size, numfiles (+required space in data folder)
data: matched, missing, mismatched, conflicts, underridden, dirty, skipped
global actions: sort by active, projects first, open, refresh data, full refresh, add marker, list packages, anneal all, unhide, avoid at startup, enabled, show replacers tab, anto-anneal, auto-anneal/install wizards, auto-refresh projects, bsa redirection, clean data directory, show inactive conflicts, show lower conflicts, skip screenshots, skip images, skip docs, skip distantLOD, save settings
project actions: open, duplicate, delete, open at texnexus, open at tesalliance, hide rename, refresh, moveto, has extra directories, skip voices, wizard, auto wizard, edit wizard, anneal, install, install last, install missing, uninstall, conversions, pack to archive, package for release, sync from data, copy conflicts to project, omod info, list structure
